// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SchoolPortal.Common.Models;
using SchoolPortal.Common.Models.dboSchema;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SchoolPortal.Common.Models
{
    public partial class SchoolPortalContext
    {
        private ISchoolPortalContextProcedures _procedures;

        public virtual ISchoolPortalContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SchoolPortalContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISchoolPortalContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class SchoolPortalContextProcedures : ISchoolPortalContextProcedures
    {
        private readonly SchoolPortalContext _context;

        public SchoolPortalContextProcedures(SchoolPortalContext context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_DeleteCountryMasterAsync(Guid? id, Guid? modifiedBy, DateTime? modifiedDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ModifiedBy",
                    Value = modifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ModifiedDate",
                    Value = modifiedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DeleteCountryMaster] @Id = @Id, @ModifiedBy = @ModifiedBy, @ModifiedDate = @ModifiedDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAllCountriesResult>> sp_GetAllCountriesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAllCountriesResult>("EXEC @returnValue = [dbo].[sp_GetAllCountries]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetAllCountries_PagedResult>> sp_GetAllCountries_PagedAsync(int? pageNumber, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetAllCountries_PagedResult>("EXEC @returnValue = [dbo].[sp_GetAllCountries_Paged] @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetCountryByIdResult>> sp_GetCountryByIdAsync(Guid? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetCountryByIdResult>("EXEC @returnValue = [dbo].[sp_GetCountryById] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_InsertCountryMasterAsync(Guid? id, string countryName, bool? isActive, bool? isDeleted, Guid? createdBy, DateTime? createdDate, Guid? modifiedBy, DateTime? modifiedDate, string status, string statusMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "CountryName",
                    Size = 100,
                    Value = countryName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = isActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = isDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = createdBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ModifiedBy",
                    Value = modifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ModifiedDate",
                    Value = modifiedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusMessage",
                    Size = 250,
                    Value = statusMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertCountryMaster] @Id = @Id, @CountryName = @CountryName, @IsActive = @IsActive, @IsDeleted = @IsDeleted, @CreatedBy = @CreatedBy, @CreatedDate = @CreatedDate, @ModifiedBy = @ModifiedBy, @ModifiedDate = @ModifiedDate, @Status = @Status, @StatusMessage = @StatusMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateCountryMasterAsync(Guid? id, string countryName, bool? isActive, bool? isDeleted, Guid? modifiedBy, DateTime? modifiedDate, string status, string statusMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "CountryName",
                    Size = 100,
                    Value = countryName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = isActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = isDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ModifiedBy",
                    Value = modifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ModifiedDate",
                    Value = modifiedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusMessage",
                    Size = 250,
                    Value = statusMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateCountryMaster] @Id = @Id, @CountryName = @CountryName, @IsActive = @IsActive, @IsDeleted = @IsDeleted, @ModifiedBy = @ModifiedBy, @ModifiedDate = @ModifiedDate, @Status = @Status, @StatusMessage = @StatusMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
